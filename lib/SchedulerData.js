'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _behaviors = require('./behaviors');

var _behaviors2 = _interopRequireDefault(_behaviors);

var _index = require('./index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SchedulerData = function () {
    function SchedulerData() {
        var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _moment2.default)().format(_index.DATE_FORMAT);
        var viewType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _index.ViewTypes.Week;
        var showAgenda = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var isEventPerspective = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        var newConfig = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
        var newBehaviors = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

        _classCallCheck(this, SchedulerData);

        this.resources = [];
        this.events = [];
        this.eventGroups = [];
        this.eventGroupsAutoGenerated = true;
        this.viewType = viewType;
        this.showAgenda = showAgenda;
        this.isEventPerspective = isEventPerspective;
        this.resizing = false;
        this.scrollToToday = false;
        this._resolveDate(0, date);
        this.config = newConfig == undefined ? _config2.default : _extends({}, _config2.default, newConfig);
        this.behaviors = newBehaviors == undefined ? _behaviors2.default : _extends({}, _behaviors2.default, newBehaviors);
        this._createHeaders();
        this._createRenderData();
    }

    _createClass(SchedulerData, [{
        key: 'setResources',
        value: function setResources(resources) {
            this._validateResource(resources);
            this.resources = Array.from(new Set(resources));
            this._createRenderData();
            this.setScrollToToday(true);
        }
    }, {
        key: 'setEventGroupsAutoGenerated',
        value: function setEventGroupsAutoGenerated(autoGenerated) {
            this.eventGroupsAutoGenerated = autoGenerated;
        }

        //optional

    }, {
        key: 'setEventGroups',
        value: function setEventGroups(eventGroups) {
            this._validateEventGroups(eventGroups);
            this.eventGroups = Array.from(new Set(eventGroups));
            this.eventGroupsAutoGenerated = false;
            this._createRenderData();
            this.setScrollToToday(true);
        }
    }, {
        key: 'addResource',
        value: function addResource(resource) {
            var existedResources = this.resources.filter(function (x) {
                return x.id === resource.id;
            });
            if (existedResources.length === 0) {
                this.resources.push(resource);
                this._createRenderData();
            }
        }
    }, {
        key: 'addEventGroup',
        value: function addEventGroup(eventGroup) {
            var existedEventGroups = this.eventGroups.filter(function (x) {
                return x.id === eventGroup.id;
            });
            if (existedEventGroups.length === 0) {
                this.eventGroups.push(eventGroup);
                this._createRenderData();
            }
        }
    }, {
        key: 'removeEventGroupById',
        value: function removeEventGroupById(eventGroupId) {
            var index = -1;
            this.eventGroups.forEach(function (item, idx) {
                if (item.id === eventGroupId) index = idx;
            });
            if (index !== -1) this.eventGroups.splice(index, 1);
        }
    }, {
        key: 'containsEventGroupId',
        value: function containsEventGroupId(eventGroupId) {
            var index = -1;
            this.eventGroups.forEach(function (item, idx) {
                if (item.id === eventGroupId) index = idx;
            });
            return index !== -1;
        }
    }, {
        key: 'setEvents',
        value: function setEvents(events) {
            this._validateEvents(events);
            this.events = events;
            if (this.eventGroupsAutoGenerated) this._generateEventGroups();
            this._createRenderData();
            this.setScrollToToday(true);
        }
    }, {
        key: 'setScrollToToday',
        value: function setScrollToToday(scrollToToday) {
            if (this.config.scrollToTodayEnabled) this.scrollToToday = scrollToToday;
        }
    }, {
        key: 'getScrollToToday',
        value: function getScrollToToday() {
            if (this.config.scrollToTodayEnabled) return this.scrollToToday;
            return false;
        }
    }, {
        key: 'prev',
        value: function prev() {
            this._resolveDate(-1);
            this.events = [];
            this._createHeaders();
            this._createRenderData();
        }
    }, {
        key: 'next',
        value: function next() {
            this._resolveDate(1);
            this.events = [];
            this._createHeaders();
            this._createRenderData();
        }
    }, {
        key: 'setDate',
        value: function setDate() {
            var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _moment2.default)().format(_index.DATE_FORMAT);

            this._resolveDate(0, date);
            this.events = [];
            this._createHeaders();
            this._createRenderData();
        }
    }, {
        key: 'setViewType',
        value: function setViewType() {
            var viewType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _index.ViewTypes.Week;
            var showAgenda = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var isEventPerspective = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            this.showAgenda = showAgenda;
            this.isEventPerspective = isEventPerspective;

            if (this.viewType !== viewType) {
                var date = this.startDate;

                if (this.viewType < viewType) {
                    if (viewType === _index.ViewTypes.Week) {
                        this.startDate = (0, _moment2.default)(date).startOf('week').format(_index.DATE_FORMAT);
                        this.endDate = (0, _moment2.default)(this.startDate).endOf('week').format(_index.DATE_FORMAT);
                    } else if (viewType === _index.ViewTypes.Month) {
                        this.startDate = (0, _moment2.default)(date).startOf('month').format(_index.DATE_FORMAT);
                        this.endDate = (0, _moment2.default)(this.startDate).endOf('month').format(_index.DATE_FORMAT);
                    } else if (viewType === _index.ViewTypes.Quarter) {
                        this.startDate = (0, _moment2.default)(date).startOf('quarter').format(_index.DATE_FORMAT);
                        this.endDate = (0, _moment2.default)(this.startDate).endOf('quarter').format(_index.DATE_FORMAT);
                    } else if (viewType === _index.ViewTypes.Year) {
                        this.startDate = (0, _moment2.default)(date).startOf('year').format(_index.DATE_FORMAT);
                        this.endDate = (0, _moment2.default)(this.startDate).endOf('year').format(_index.DATE_FORMAT);
                    }
                } else {
                    var start = (0, _moment2.default)(this.startDate);
                    var end = (0, _moment2.default)(this.endDate).add(1, 'days');

                    if (this.selectDate !== undefined) {
                        var selectDate = (0, _moment2.default)(this.selectDate);
                        if (selectDate >= start && selectDate < end) {
                            date = this.selectDate;
                        }
                    }

                    var now = (0, _moment2.default)();
                    if (now >= start && now < end) {
                        date = now.format(_index.DATE_FORMAT);
                    }

                    if (viewType === _index.ViewTypes.Day) {
                        this.startDate = date;
                        this.endDate = this.startDate;
                    } else if (viewType === _index.ViewTypes.Week) {
                        this.startDate = (0, _moment2.default)(date).startOf('week').format(_index.DATE_FORMAT);
                        this.endDate = (0, _moment2.default)(this.startDate).endOf('week').format(_index.DATE_FORMAT);
                    } else if (viewType === _index.ViewTypes.Month) {
                        this.startDate = (0, _moment2.default)(date).startOf('month').format(_index.DATE_FORMAT);
                        this.endDate = (0, _moment2.default)(this.startDate).endOf('month').format(_index.DATE_FORMAT);
                    } else if (viewType === _index.ViewTypes.Quarter) {
                        this.startDate = (0, _moment2.default)(date).startOf('quarter').format(_index.DATE_FORMAT);
                        this.endDate = (0, _moment2.default)(this.startDate).endOf('quarter').format(_index.DATE_FORMAT);
                    }
                }

                this.viewType = viewType;
                this.events = [];
                this._createHeaders();
                this._createRenderData();
                this.setScrollToToday(true);
            }
        }
    }, {
        key: 'setSchedulerMaxHeight',
        value: function setSchedulerMaxHeight(newSchedulerMaxHeight) {
            this.config.schedulerMaxHeight = newSchedulerMaxHeight;
        }
    }, {
        key: 'getSlots',
        value: function getSlots() {
            return this.isEventPerspective ? this.eventGroups : this.resources;
        }
    }, {
        key: 'getSlotById',
        value: function getSlotById(slotId) {
            var slots = this.getSlots();
            var slot = undefined;
            slots.forEach(function (item) {
                if (item.id === slotId) slot = item;
            });
            return slot;
        }
    }, {
        key: 'getResourceById',
        value: function getResourceById(resourceId) {
            var resource = undefined;
            this.resources.forEach(function (item) {
                if (item.id === resourceId) resource = item;
            });
            return resource;
        }
    }, {
        key: 'getTableHeaderHeight',
        value: function getTableHeaderHeight() {
            return this.config.tableHeaderHeight;
        }
    }, {
        key: 'getResourceTableWidth',
        value: function getResourceTableWidth() {
            if (this.showAgenda) return this.config.agendaResourceTableWidth;

            return this.viewType === _index.ViewTypes.Week ? this.config.weekResourceTableWidth : this.viewType === _index.ViewTypes.Day ? this.config.dayResourceTableWidth : this.viewType === _index.ViewTypes.Month ? this.config.monthResourceTableWidth : this.viewType === _index.ViewTypes.Year ? this.config.yearResourceTableWidth : this.config.quarterResourceTableWidth;
        }
    }, {
        key: 'getContentCellWidth',
        value: function getContentCellWidth() {
            return this.viewType === _index.ViewTypes.Week ? this.config.weekCellWidth : this.viewType === _index.ViewTypes.Day ? this.config.dayCellWidth : this.viewType === _index.ViewTypes.Month ? this.config.monthCellWidth : this.viewType === _index.ViewTypes.Year ? this.config.yearCellWidth : this.config.quarterCellWidth;
        }
    }, {
        key: 'getCellMaxEvents',
        value: function getCellMaxEvents() {
            return this.viewType === _index.ViewTypes.Week ? this.config.weekMaxEvents : this.viewType === _index.ViewTypes.Day ? this.config.dayMaxEvents : this.viewType === _index.ViewTypes.Month ? this.config.monthMaxEvents : this.viewType === _index.ViewTypes.Year ? this.config.yearMaxEvents : this.config.quarterMaxEvents;
        }
    }, {
        key: 'getContentTableWidth',
        value: function getContentTableWidth() {
            return this.headers.length * this.getContentCellWidth();
        }
    }, {
        key: 'getDateLabel',
        value: function getDateLabel() {
            var start = (0, _moment2.default)(this.startDate);
            var end = (0, _moment2.default)(this.endDate);
            var dateLabel = start.format('YYYY MMM Do');

            if (this.viewType === _index.ViewTypes.Week) {
                dateLabel = start.format('YYYY MMM Do') + '-' + end.format('Do');
                if (start.month() !== end.month()) dateLabel = start.format('YYYY MMM Do') + '-' + end.format('MMM Do');
                if (start.year() !== end.year()) dateLabel = start.format('YYYY MMM Do') + '-' + end.format('YYYY MMM Do');
            } else if (this.viewType === _index.ViewTypes.Month) {
                dateLabel = start.format('YYYY MMM');
            } else if (this.viewType === _index.ViewTypes.Quarter) {
                dateLabel = start.format('YYYY MMM Do') + '-' + end.format('MMM Do');
            } else if (this.viewType === _index.ViewTypes.Year) {
                dateLabel = start.format('YYYY');
            }

            return dateLabel;
        }
    }, {
        key: 'addEvent',
        value: function addEvent(newEvent) {
            this._attachEvent(newEvent);
            if (this.eventGroupsAutoGenerated) this._generateEventGroups();
            this._createRenderData();
        }
    }, {
        key: 'updateEventStart',
        value: function updateEventStart(event, newStart) {
            this._detachEvent(event);
            event.start = newStart;
            this._attachEvent(event);
            this._createRenderData();
        }
    }, {
        key: 'updateEventEnd',
        value: function updateEventEnd(event, newEnd) {
            event.end = newEnd;
            this._createRenderData();
        }
    }, {
        key: 'moveEvent',
        value: function moveEvent(event, newSlotId, newSlotName, newStart, newEnd) {
            this._detachEvent(event);
            if (this.isEventPerspective) {
                event.groupId = newSlotId;
                event.groupName = newSlotName;
            } else event.resourceId = newSlotId;
            event.end = newEnd;
            event.start = newStart;
            this._attachEvent(event);
            this._createRenderData();
        }
    }, {
        key: '_detachEvent',
        value: function _detachEvent(event) {
            var index = this.events.indexOf(event);
            if (index !== -1) this.events.splice(index, 1);
        }
    }, {
        key: '_attachEvent',
        value: function _attachEvent(event) {
            var pos = 0;
            var eventStart = (0, _moment2.default)(event.start);
            this.events.forEach(function (item, index) {
                var start = (0, _moment2.default)(item.start);
                if (eventStart >= start) pos = index + 1;
            });
            this.events.splice(pos, 0, event);
        }
    }, {
        key: '_resolveDate',
        value: function _resolveDate(num) {
            var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

            if (date != undefined) this.selectDate = (0, _moment2.default)(date).format(_index.DATE_FORMAT);

            if (this.viewType === _index.ViewTypes.Week) {
                this.startDate = date != undefined ? (0, _moment2.default)(date).startOf('week').format(_index.DATE_FORMAT) : (0, _moment2.default)(this.startDate).add(num, 'weeks').format(_index.DATE_FORMAT);
                this.endDate = (0, _moment2.default)(this.startDate).endOf('week').format(_index.DATE_FORMAT);
            } else if (this.viewType === _index.ViewTypes.Day) {
                this.startDate = date != undefined ? this.selectDate : (0, _moment2.default)(this.startDate).add(num, 'days').format(_index.DATE_FORMAT);
                this.endDate = this.startDate;
            } else if (this.viewType === _index.ViewTypes.Month) {
                this.startDate = date != undefined ? (0, _moment2.default)(date).startOf('month').format(_index.DATE_FORMAT) : (0, _moment2.default)(this.startDate).add(num, 'months').format(_index.DATE_FORMAT);
                this.endDate = (0, _moment2.default)(this.startDate).endOf('month').format(_index.DATE_FORMAT);
            } else if (this.viewType === _index.ViewTypes.Quarter) {
                this.startDate = date != undefined ? (0, _moment2.default)(date).startOf('quarter').format(_index.DATE_FORMAT) : (0, _moment2.default)(this.startDate).add(num, 'quarters').format(_index.DATE_FORMAT);
                this.endDate = (0, _moment2.default)(this.startDate).endOf('quarter').format(_index.DATE_FORMAT);
            } else if (this.viewType === _index.ViewTypes.Year) {
                this.startDate = date != undefined ? (0, _moment2.default)(date).startOf('year').format(_index.DATE_FORMAT) : (0, _moment2.default)(this.startDate).add(num, 'years').format(_index.DATE_FORMAT);
                this.endDate = (0, _moment2.default)(this.startDate).endOf('year').format(_index.DATE_FORMAT);
            }
        }
    }, {
        key: '_createHeaders',
        value: function _createHeaders() {
            var headers = [],
                start = (0, _moment2.default)(this.startDate),
                end = (0, _moment2.default)(this.endDate),
                header = start;

            if (this.showAgenda) {
                headers.push({ time: header.format(_index.DATETIME_FORMAT), nonWorkingTime: false });
            } else {
                if (this.viewType === _index.ViewTypes.Day) {
                    start = start.add(this.config.dayStartFrom, 'hours');
                    end = end.add(this.config.dayStopTo, 'hours');
                    header = start;

                    while (header >= start && header <= end) {
                        var time = header.format(_index.DATETIME_FORMAT);
                        var nonWorkingTime = this.behaviors.isNonWorkingTimeFunc(this, time);
                        headers.push({ time: time, nonWorkingTime: nonWorkingTime });

                        header = header.add(30, 'minutes');
                        time = header.format(_index.DATETIME_FORMAT);
                        nonWorkingTime = this.behaviors.isNonWorkingTimeFunc(this, time);
                        headers.push({ time: time, nonWorkingTime: nonWorkingTime });

                        header = header.add(30, 'minutes');
                    }
                } else {
                    while (header >= start && header <= end) {
                        var _time = header.format(_index.DATETIME_FORMAT);
                        var _nonWorkingTime = this.behaviors.isNonWorkingTimeFunc(this, _time);
                        headers.push({ time: _time, nonWorkingTime: _nonWorkingTime });

                        header = header.add(1, 'days');
                    }
                }
            }

            this.headers = headers;
        }
    }, {
        key: '_createInitHeaderEvents',
        value: function _createInitHeaderEvents(header) {
            var start = (0, _moment2.default)(header.time),
                startValue = start.format(_index.DATETIME_FORMAT);
            var endValue = this.showAgenda ? this.viewType === _index.ViewTypes.Week ? start.add(1, 'weeks').format(_index.DATETIME_FORMAT) : this.viewType === _index.ViewTypes.Day ? start.add(1, 'days').format(_index.DATETIME_FORMAT) : this.viewType === _index.ViewTypes.Month ? start.add(1, 'months').format(_index.DATETIME_FORMAT) : this.viewType === _index.ViewTypes.Year ? start.add(1, 'years').format(_index.DATETIME_FORMAT) : start.add(1, 'quarters').format(_index.DATETIME_FORMAT) : this.viewType === _index.ViewTypes.Day ? start.add(30, 'minutes').format(_index.DATETIME_FORMAT) : start.add(1, 'days').format(_index.DATETIME_FORMAT);
            return {
                time: header.time,
                nonWorkingTime: header.nonWorkingTime,
                start: startValue,
                end: endValue,
                count: 0,
                addMore: 0,
                addMoreIndex: 0,
                events: [,,,]
            };
        }
    }, {
        key: '_createHeaderEvent',
        value: function _createHeaderEvent(render, span, eventItem) {
            return {
                render: render,
                span: span,
                eventItem: eventItem
            };
        }
    }, {
        key: '_getEventSlotId',
        value: function _getEventSlotId(event) {
            return this.isEventPerspective ? this._getEventGroupId(event) : event.resourceId;
        }
    }, {
        key: '_getEventGroupId',
        value: function _getEventGroupId(event) {
            return !!event.groupId ? event.groupId.toString() : event.id.toString();
        }
    }, {
        key: '_getEventGroupName',
        value: function _getEventGroupName(event) {
            return !!event.groupName ? event.groupName : event.title;
        }
    }, {
        key: '_generateEventGroups',
        value: function _generateEventGroups() {
            var _this = this;

            var eventGroups = [];
            var set = new Set();
            this.events.forEach(function (item) {
                var groupId = _this._getEventGroupId(item);
                var groupName = _this._getEventGroupName(item);

                if (!set.has(groupId)) {
                    eventGroups.push({
                        id: groupId,
                        name: groupName,
                        state: item
                    });
                    set.add(groupId);
                }
            });
            this.eventGroups = eventGroups;
        }
    }, {
        key: '_createInitRenderData',
        value: function _createInitRenderData(isEventPerspective, eventGroups, resources, headers) {
            var _this2 = this;

            return isEventPerspective ? eventGroups.map(function (eventGroup) {
                var headerEvents = headers.map(function (header) {
                    return _this2._createInitHeaderEvents(header);
                });

                return {
                    slotId: eventGroup.id,
                    slotName: eventGroup.name,
                    rowHeight: 0,
                    headerItems: headerEvents
                };
            }) : resources.map(function (resource) {
                var headerEvents = headers.map(function (header) {
                    return _this2._createInitHeaderEvents(header);
                });

                return {
                    slotId: resource.id,
                    slotName: resource.name,
                    rowHeight: 0,
                    headerItems: headerEvents
                };
            });
        }
    }, {
        key: '_getSpan',
        value: function _getSpan(startTime, endTime, startDate, endDate) {
            if (this.showAgenda) return 1;

            var start = this.viewType === _index.ViewTypes.Day ? (0, _moment2.default)(startTime).startOf('hour').add(30, 'minutes') <= (0, _moment2.default)(startTime) ? (0, _moment2.default)(startTime).startOf('hour').add(30, 'minutes') : (0, _moment2.default)(startTime).startOf('hour') : (0, _moment2.default)(startTime).startOf('day'),
                end = (0, _moment2.default)(endTime),
                spanStart = (0, _moment2.default)(startDate),
                spanEnd = (0, _moment2.default)(endDate),
                time = start,
                span = 0;

            while (time >= start && time < end) {
                if (time >= spanStart && time <= spanEnd) {
                    span++;
                }

                time = this.viewType === _index.ViewTypes.Day ? time.add(30, 'minutes') : time.add(1, 'days');
            }

            return span;
        }
    }, {
        key: '_validateResource',
        value: function _validateResource(resources) {
            if (Object.prototype.toString.call(resources) !== "[object Array]") {
                throw new Error('Resources should be Array object');
            }

            resources.forEach(function (item, index) {
                if (item == undefined) {
                    console.error('Resource undefined: ' + index);
                    throw new Error('Resource undefined: ' + index);
                }
                if (item.id == undefined || item.name == undefined) {
                    console.error('Resource property missed', index, item);
                    throw new Error('Resource property undefined: ' + index);
                }
            });
        }
    }, {
        key: '_validateEventGroups',
        value: function _validateEventGroups(eventGroups) {
            if (Object.prototype.toString.call(eventGroups) !== "[object Array]") {
                throw new Error('Event groups should be Array object');
            }

            eventGroups.forEach(function (item, index) {
                if (item == undefined) {
                    console.error('Event group undefined: ' + index);
                    throw new Error('Event group undefined: ' + index);
                }
                if (item.id == undefined || item.name == undefined) {
                    console.error('Event group property missed', index, item);
                    throw new Error('Event group property undefined: ' + index);
                }
            });
        }
    }, {
        key: '_validateEvents',
        value: function _validateEvents(events) {
            if (Object.prototype.toString.call(events) !== "[object Array]") {
                throw new Error('Events should be Array object');
            }

            events.forEach(function (e, index) {
                if (e == undefined) {
                    console.error('Event undefined: ' + index);
                    throw new Error('Event undefined: ' + index);
                }
                if (e.id == undefined || e.resourceId == undefined || e.title == undefined || e.start == undefined || e.end == undefined) {
                    console.error('Event property missed', index, e);
                    throw new Error('Event property undefined: ' + index);
                }
            });
        }
    }, {
        key: '_compare',
        value: function _compare(event1, event2) {
            var start1 = (0, _moment2.default)(event1.start),
                start2 = (0, _moment2.default)(event2.start);
            if (start1 !== start2) return start1 < start2 ? -1 : 1;

            var end1 = (0, _moment2.default)(event1.end),
                end2 = (0, _moment2.default)(event2.end);
            if (end1 !== end2) return end1 < end2 ? -1 : 1;

            return event1.id < event2.id ? -1 : 1;
        }
    }, {
        key: '_createRenderData',
        value: function _createRenderData() {
            var _this3 = this;

            var initRenderData = this._createInitRenderData(this.isEventPerspective, this.eventGroups, this.resources, this.headers);
            //this.events.sort(this._compare);

            this.events.forEach(function (item) {
                var resourceEventsList = initRenderData.filter(function (x) {
                    return x.slotId === _this3._getEventSlotId(item);
                });
                if (resourceEventsList.length > 0) {
                    var resourceEvents = resourceEventsList[0];
                    var span = _this3._getSpan(item.start, item.end, _this3.headers[0].time, _this3.headers[_this3.headers.length - 1].time);
                    var eventStart = (0, _moment2.default)(item.start),
                        eventEnd = (0, _moment2.default)(item.end);
                    var pos = -1;

                    resourceEvents.headerItems.forEach(function (header, index) {
                        var headerStart = (0, _moment2.default)(header.start),
                            headerEnd = (0, _moment2.default)(header.end);
                        if (headerEnd > eventStart && headerStart < eventEnd) {
                            header.count = header.count + 1;

                            if (pos === -1) {
                                var tmp = 0;
                                while (header.events[tmp] !== undefined) {
                                    tmp++;
                                }pos = tmp;
                            }
                            var render = headerStart <= eventStart || index === 0;
                            header.events[pos] = _this3._createHeaderEvent(render, span, item);
                        }
                    });
                }
            });

            initRenderData.forEach(function (resourceEvents) {
                var maxRowsCount = 0;
                var hasSummary = false;
                resourceEvents.headerItems.forEach(function (headerItem) {
                    maxRowsCount = headerItem.count > maxRowsCount ? headerItem.count : maxRowsCount;

                    var renderItemsCount = 0,
                        addMoreIndex = 0,
                        index = 0;
                    while (index < _this3.getCellMaxEvents() - 1) {
                        if (headerItem.events[index] !== undefined) {
                            renderItemsCount++;
                            addMoreIndex = index + 1;
                        }

                        index++;
                    }

                    if (headerItem.events[index] !== undefined) {
                        if (renderItemsCount + 1 < headerItem.count) {
                            headerItem.addMore = headerItem.count - renderItemsCount;
                            headerItem.addMoreIndex = addMoreIndex;
                        }
                    } else {
                        if (renderItemsCount < headerItem.count) {
                            headerItem.addMore = headerItem.count - renderItemsCount;
                            headerItem.addMoreIndex = addMoreIndex;
                        }
                    }

                    if (_this3.behaviors.getSummaryFunc !== undefined) {
                        var events = [];
                        headerItem.events.forEach(function (e) {
                            if (!!e && !!e.eventItem) events.push(e.eventItem);
                        });

                        headerItem.summary = _this3.behaviors.getSummaryFunc(_this3, events, resourceEvents.slotId, resourceEvents.slotName, headerItem.start, headerItem.end);
                        if (!!headerItem.summary && headerItem.summary.text != undefined) hasSummary = true;
                    }
                });

                resourceEvents.hasSummary = hasSummary;
                var rowsCount = maxRowsCount > _this3.getCellMaxEvents() ? _this3.getCellMaxEvents() : maxRowsCount;
                resourceEvents.rowHeight = rowsCount === 0 ? _this3.config.eventItemLineHeight + 2 : rowsCount * _this3.config.eventItemLineHeight + (_this3.config.creatable && _this3.config.checkConflict === false ? 20 : 2);
                if (hasSummary) resourceEvents.rowHeight = resourceEvents.rowHeight + _this3.config.eventItemLineHeight;
            });

            this.renderData = initRenderData;
        }
    }, {
        key: '_startResizing',
        value: function _startResizing() {
            this.resizing = true;
        }
    }, {
        key: '_stopResizing',
        value: function _stopResizing() {
            this.resizing = false;
        }
    }, {
        key: '_isResizing',
        value: function _isResizing() {
            return this.resizing;
        }
    }]);

    return SchedulerData;
}();

exports.default = SchedulerData;